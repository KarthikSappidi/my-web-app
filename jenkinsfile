pipeline {
    agent any

    environment {
        
        DOCKER_IMAGE = 'karthiksappidi/web:v1'
        DOCKER_REGISTRY_CREDENTIALS = 'docker'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/KarthikSappidi/my-web-app.git'
            }
        }

        
        stage('Install Dependencies') {
            steps {
                sh 'sudo apt-get update'
                sh 'sudo apt-get install -y python3 python3-pip python3-venv'
                //sh 'pip install -r requirements.txt'
            }
        }
        stage('Create Virtual Environment') {
            steps {
                sh 'python3 -m venv venv'
            }
        }
        stage('Install Python Dependencies') {
            steps {
                sh '''
                . venv/bin/activate
                pip install -r requirements.txt
                '''
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: DOCKER_REGISTRY_CREDENTIALS, toolName: 'docker') {
                        sh 'docker build -t karthiksappidi/web:v1 .'
                        sh 'docker push karthiksappidi/web:v1'
                    }
                }
            }
        }

        stage('Deploy to Container') {
            steps {
                script {
                    // Remove old container if it exists
                    sh '''
                        docker ps -a --filter "name=web" --format "{{.ID}}" | xargs -r docker rm -f
                    '''
                    // Run the new container
                    sh 'docker run -dt --name web -p 8000:8000 karthiksappidi/web:v1'
                }
            }
        }
    }

    post {
        always {
            // Placeholder for cleanup or other post-processing actions
            echo 'Cleaning up after pipeline run.'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
